package functionalprogramming;

import java.util.List;
import java.util.function.Consumer;
import java.util.function.Predicate;

public class PredicateClass {
	public static void main(String[] args) {
		
//		List.of(1, 2, 5, 4, 64, 23, 744, 23, 478).stream().filter(e -> e % 2 == 0)
//				.forEach(e -> System.out.println(e));

		// Stream<T> filter(Predicate<? super T> predicate);
		// boolean test(T t);

//		List.of(1, 2, 5, 4, 64, 23, 744, 23, 478).stream().filter(new EvenNumberPredicate())
//				.forEach(e -> System.out.println(e));

		// checking forEach Interface
		// void forEach(Consumer<? super T> action);
		// void accept(T t);

		List.of(1, 2, 5, 4, 64, 23, 744, 23, 478).stream().filter(new EvenNumberPredicate())
				.forEach(new ForEachConsumer());

	}
}

//behind forEach function 
class ForEachConsumer implements Consumer<Integer> {

	@Override
	public void accept(Integer t) {
		// TODO Auto-generated method stub
		System.out.println(t);

	}

}

//Behind Filter method in functional
class EvenNumberPredicate implements Predicate<Integer> {
@Override
public boolean test(Integer num) {
	return num % 2 == 0;
}
}
